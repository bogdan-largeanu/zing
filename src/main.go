package main

import (
	"fmt"
	"gopkg.in/yaml.v2"
	"io/ioutil"
	"log"
	"os/exec"
	"strings"

	"github.com/spf13/cobra"
)

type AutoGenerated []struct {
	Run struct {
		Key                  string `yaml:"key"`
		Description          string `yaml:"description"`
		Path                 string `yaml:"path"`
		LiteralBlockBashFile string `yaml:"literal_block_bash_file"`
	} `yaml:"run"`
}

func (c *AutoGenerated) readYml() *AutoGenerated {

	yamlFile, err := ioutil.ReadFile("conf.yaml")
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, c)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	return c
}

func runBash(command string) {
	//app := "echo hello dork"
	shell := "bash"

	cmd := exec.Command(shell, "-c", command)
	stdout, err := cmd.Output()

	if err != nil {
		fmt.Println(err.Error())
		return
	}

	fmt.Print(string(stdout))
}

func main() {
	var c AutoGenerated
	c.readYml()
	fmt.Printf("%+v\n", c)
	literalBlockBashFile := c[0].Run.LiteralBlockBashFile
	//fmt.Println("Wasabi: "+ literalBlockBashFile)
	arrayOfBashCommands := strings.Split(literalBlockBashFile, "\n")

	//for i, command := range arrayOfBashCommands {
	//	println(i, command)
	//}

	//modules.WriteYml()
	runBash(arrayOfBashCommands[0])

	tasks := make([]string, 10)

	var cmdAdd = &cobra.Command{
		Use:   "add [string to add task]",
		Short: "add task to a listPrint anything to the screen",
		Long: `add will add tasks to a list.
For many years people have printed back to the screen.`,
		Args: cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			//fmt.Println("Add: " + strings.Join(args, " "))
			//fmt.Println("task added")
			tasks = append(tasks, strings.Join(args, "-"))
			fmt.Println("Added to list: ", tasks)
		},
	}

	var rootCmd = &cobra.Command{Use: "app"}
	rootCmd.AddCommand(cmdAdd)
	rootCmd.Execute()
}
